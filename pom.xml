<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Project Identification -->
  <groupId>com.zoho.uvh</groupId>
  <artifactId>UVHResolver</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging> <!-- Package as a Web Application Archive -->

  <name>UVHResolver</name>
<!--  <url>http://zoho.com</url> -->

  <!-- Dependency Versions and Build Properties -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source> <!-- Minimum Java Version -->
    <maven.compiler.target>11</maven.compiler.target> <!-- Minimum Java Version -->
    <failOnMissingWebXml>false</failOnMissingWebXml> <!-- Important for modern setup -->
    <!-- Define versions for dependencies -->
    <jersey.version>3.1.5</jersey.version>
    <jakarta.jakartaee-api.version>10.0.0</jakarta.jakartaee-api.version>
    <jakarta.servlet.version>6.0.0</jakarta.servlet.version> <!-- Explicit Servlet version -->
    <jakarta.xml.bind-api.version>4.0.1</jakarta.xml.bind-api.version>
    <jaxb.runtime.version>4.0.4</jaxb.runtime.version>
    <junit.version>5.10.2</junit.version>
    <postgresql.version>42.7.1</postgresql.version>
    <slf4j.version>2.0.11</slf4j.version>
    <logback.version>1.4.14</logback.version>
    <hikaricp.version>5.1.0</hikaricp.version>
    <jgit.version>6.8.0.202311291450-r</jgit.version>
    <!-- Maven Plugin Versions -->
    <maven-war-plugin.version>3.4.0</maven-war-plugin.version>
    <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
    <tomcat7-maven-plugin.version>2.2</tomcat7-maven-plugin.version>
  </properties>

  <dependencies>
    <!-- Jakarta EE Web Profile APIs (Servlet, JAX-RS, etc.) -->
    <!-- Scope is 'provided' because the server (Tomcat) provides these -->
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-web-api</artifactId>
      <version>${jakarta.jakartaee-api.version}</version>
      <scope>provided</scope>
    </dependency>
    <!-- Explicit Servlet API dependency (sometimes needed by plugins) -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>${jakarta.servlet.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Jersey JAX-RS Implementation -->
    <dependency>
      <groupId>org.glassfish.jersey.containers</groupId>
      <artifactId>jersey-container-servlet</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>${jersey.version}</version> <!-- For Dependency Injection -->
    </dependency>

    <!-- JAXB API and Runtime (for XML processing, required for JDK 9+) -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <version>${jakarta.xml.bind-api.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>${jaxb.runtime.version}</version>
      <scope>runtime</scope> <!-- Implementation needed at runtime -->
    </dependency>

    <!-- PostgreSQL Database Driver -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- HikariCP Connection Pooling -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${hikaricp.version}</version>
    </dependency>

    <!-- Logging Facade (SLF4j) and Implementation (Logback) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- JGit (for future GitHub integration) -->
    <dependency>
      <groupId>org.eclipse.jgit</groupId>
      <artifactId>org.eclipse.jgit</artifactId>
      <version>${jgit.version}</version>
    </dependency>

    <!-- JUnit 5 Testing Dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <!-- Build Configuration -->
  <build>
    <!-- Final Name of the WAR file (e.g., UVHResolver.war) -->
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <!-- Compiler Plugin - Enforces Java version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>
      <!-- WAR Plugin - Packages the application -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${maven-war-plugin.version}</version>
      </plugin>
      <!-- Tomcat 7 Maven Plugin - For running embedded during development -->
<!--      <plugin>-->
<!--        <groupId>org.apache.tomcat.maven</groupId>-->
<!--        <artifactId>tomcat7-maven-plugin</artifactId>-->
<!--        <version>${tomcat7-maven-plugin.version}</version>-->
<!--        <configuration>-->
<!--          <port>8080</port>-->
<!--          <path>/uvhresolver</path>-->
<!--          <uriEncoding>UTF-8</uriEncoding>-->
<!--        </configuration>-->
<!--      </plugin>-->
    </plugins>
  </build>

</project>